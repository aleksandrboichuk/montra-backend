// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String            @default(uuid()) @id
  email                   String            @unique @db.VarChar(50)
  password                String            @db.Text

  // info fields about user
  phone                   String?           @unique
  name                    String?           @db.VarChar(50)
  avatar                  String?
  age                     Int?
  country                 String?           @db.VarChar(20)
  locale                  String?           @db.VarChar(3)
  email_verification_code String?
  phone_verification_code String?
  phone_verified          Boolean           @default(false)
  email_verified          Boolean           @default(false)
  email_verified_at       DateTime?
  phone_verified_at       DateTime?

  //social network fields
  social_network          SocialNetwork?
  social_network_id       String?

  // system fields
  admin                   Boolean           @default(false)
  last_login              DateTime?
  refresh_token           String?           @db.Text
  created_at              DateTime          @default(now())
  updated_at              DateTime          @updatedAt

  // relations
  password_resets         PasswordResets[]
  wallets                 Wallet[]
  transaction_categories  TransactionCategory[]

  @@map("users")
}

model PasswordResets {
  id                      String            @default(uuid()) @id
  user_id                 String
  code                    String
  active                  Boolean           @default(true)
  created_at              DateTime          @default(now())
  updated_at              DateTime          @updatedAt

  // relations
  user                    User              @relation(fields: [user_id], references: [id])

  @@map("password_resets")
}

model Wallet {
  id                      String            @default(uuid()) @id
  user_id                 String
  name                    String            @default("Default Wallet")
  balance                 Float             @default(0.0)
  active                  Boolean           @default(true)
  currency_id             String
  created_at              DateTime          @default(now())
  updated_at              DateTime          @updatedAt

  // relations
  user                    User              @relation(fields: [user_id], references: [id])
  currency                Currency          @relation(fields: [currency_id], references: [id])
  transactions            WalletTransaction[]

  @@map("wallets")
}

model WalletTransaction {
  id                      String            @default(uuid()) @id
  wallet_id               String
  amount                  Float
  description             String            @db.Text
  type                    TransactionTypes
  category_id             String
  transfer_to             String?
  receipt                 String?
  created_at              DateTime          @default(now())
  updated_at              DateTime          @updatedAt

  // relations
  wallet                  Wallet               @relation(fields: [wallet_id], references: [id])
  category                TransactionCategory  @relation(fields: [category_id], references: [id])

  @@map("wallet_transactions")
}

model TransactionCategory {
  id                      String            @default(uuid()) @id
  name                    String
  main                    Boolean           @default(false)
  created_by              String?
  icon                    String?
  created_at              DateTime          @default(now())
  updated_at              DateTime          @updatedAt

  // relations
  transactions            WalletTransaction[]
  user                    User?             @relation(fields: [created_by], references: [id])

  @@map("transaction_categories")
}

model Currency {
  id                      String            @default(uuid()) @id
  name                    String
  symbol                  String
  code                    String

  // relations
  wallets                 Wallet[]

  @@map("currencies")
}

enum SocialNetwork {
  GOOGLE
  TWITTER
  FACEBOOK
  APPLE
}

enum TransactionTypes {
  EXPENSE
  INCOME
  TRANSFER
}